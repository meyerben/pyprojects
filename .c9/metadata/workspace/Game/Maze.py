{"changed":true,"filter":false,"title":"Maze.py","tooltip":"/Game/Maze.py","value":"import keyword\n#LEARN HOW TO MOVE AN OBJECT IN STRINGS\n\nWin = '''\n\n\n\n\nYou Win!\n\n'''\nmap = [\n[ \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"8\", \"O\", \"O\", \"O\", \"8\" ],\n[ \"8\", \" \", \" \", \" \", \"8\", \" \", \" \", \" \", \"8\", \" \", \" \", \" \", \"8\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"8\" ],\n[ \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \" \", \" \", \" \", \"8\", \"a\", \"a\", \"a\", \"8\" ],\n[ \"8\", \" \", \" \", \" \", \"8\", \" \", \" \", \" \", \"8\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"8\", \" \", \" \", \" \", \"8\" ],\n[ \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \" \", \" \", \" \", \"a\", \"a\", \"a\", \"a\", \"8\", \"a\", \"a\", \"a\", \"8\" ],\n[ \"8\", \"X\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"8\", \" \", \" \", \" \", \"8\", \" \", \" \", \" \", \"8\" ],\n[ \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"8\", \"a\", \"a\", \"a\", \"8\" ]\n]\n\nWin = '''\n\n\n\n\nYou Win!\n\n'''\n\ndef ShowMaze(walls):\n    print(\"\".join(walls[0]))\n    print(\"\".join(walls[1]))\n    print(\"\".join(walls[2]))\n    print(\"\".join(walls[3]))\n    print(\"\".join(walls[4]))\n    print(\"\".join(walls[5]))\n    print(\"\".join(walls[6]))\n\n\ndef FindPickle(maze,object):\n    '''takes in a nested list (in the form of a maze) and returns the position\n    of the object given as the second object'''\n    row = 0\n    col = 0\n    for i in range(len(maze)): #Runs through each row in the map\n        if object in map[i]:   #If the runner is in this row\n            row = i            #set row equal to this index\n            col = map[i].index(object) #set column equal to this index\n        else: \n            row +=0            #added both of these for\n            col +=0            #clarity!\n    return [row, col]\n\n#print FindPickle(map,\"X\") #This works!\n\n\ndef MoveDown(maze):\n    row = (FindPickle(maze,\"X\"))[0]\n    col = (FindPickle(maze,\"X\"))[1]\n    maze[row].remove(\"X\")               #Removes the X from the first row\n    maze[row].insert(col,\" \")   #inserts the \" \" into the second row to replace the old x\n    del (maze[row+1])[col]        #must use delete because remove can only take 1 argument\n    maze[row+1].insert(col,\"X\")   #Inserts the X into the second list.\n\ndef MoveUp(maze):\n    row = (FindPickle(maze,\"X\"))[0]\n    col = (FindPickle(maze,\"X\"))[1]\n    maze[row].remove(\"X\")               \n    maze[row].insert(col,\" \")   \n    del (maze[row-1])[col]        \n    maze[row-1].insert(col,\"X\")   \n\n\ndef MoveRight(maze):\n    row = (FindPickle(maze,\"X\"))[0]\n    col = (FindPickle(maze,\"X\"))[1]\n    maze[row].remove(\"X\")               \n    maze[row].insert(col,\" \")   \n    del (maze[row])[col+1]        \n    maze[row].insert(col+1,\"X\")   \n\ndef MoveLeft(maze):\n    row = (FindPickle(maze,\"X\"))[0]\n    col = (FindPickle(maze,\"X\"))[1]\n    maze[row].remove(\"X\")               \n    maze[row].insert(col,\" \")   \n    del (maze[row])[col-1]        \n    maze[row].insert(col-1,\"X\")\n\n\n        \ndef getMove(row,col):\n    # Returns the letter the player entered. This function makes sure the player entered a single letter, and not something else.\n    while True:\n        print('wasd')\n        move = raw_input()\n        move = move.lower()\n        if (move == \"w\") and (((map[row-1])[col] == \"a\") or ((map[row-1])[col] == \"8\")):\n            ShowMaze(map)\n        elif (move == \"s\") and (((map[row+1])[col] == \"a\") or ((map[row+1])[col] == \"8\")):\n            ShowMaze(map)\n        elif (move == \"d\") and (((map[row])[col+1] == \"a\") or ((map[row])[col+1] == \"8\")):\n            ShowMaze(map)\n        elif (move == \"a\") and (((map[row])[col-1] == \"a\") or ((map[row])[col-1] == \"8\")):\n            ShowMaze(map)\n        elif (move == \"w\") and ((map[row-1])[col] == \"O\"):\n            print Win\n            break\n        else: \n            return move\n\nrow = (FindPickle(map,\"X\"))[0]\ncol = (FindPickle(map,\"X\"))[1]\nGameisDone = False\nwhile True:\n    row = (FindPickle(map,\"X\"))[0]\n    col = (FindPickle(map,\"X\"))[1]\n    ShowMaze(map)\n    Move = getMove(row,col)\n    if Move == \"w\":\n        MoveUp(map)\n    elif Move == \"s\":\n        MoveDown(map)\n    elif Move == \"d\":\n        MoveRight(map)\n    elif Move == \"a\":\n        MoveLeft(map)\n    else:\n        break\n        \n","undoManager":{"mark":-2,"position":7,"stack":[[{"group":"doc","deltas":[{"start":{"row":131,"column":0},"end":{"row":131,"column":1},"action":"insert","lines":["p"]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":1},"end":{"row":131,"column":2},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":2},"end":{"row":131,"column":3},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":3},"end":{"row":131,"column":4},"action":"insert","lines":["p"]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":3},"end":{"row":131,"column":4},"action":"remove","lines":["p"]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":2},"end":{"row":131,"column":3},"action":"remove","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":1},"end":{"row":131,"column":2},"action":"remove","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":0},"end":{"row":131,"column":1},"action":"remove","lines":["p"]}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":14},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":30,"state":"start","mode":"ace/mode/python"}},"timestamp":1425423889000}